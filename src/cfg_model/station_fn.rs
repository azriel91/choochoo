use std::{
    fmt::{self, Debug},
    future::Future,
    pin::Pin,
    sync::Arc,
};

use resman::Resources;

use crate::rt_model::Station;

/// Return type of the `StationFn`.
pub type StationFnReturn<'f, R, E> = Pin<Box<dyn Future<Output = Result<R, E>> + Send + Sync + 'f>>;

/// Steps to run for this part of the station's logic.
pub struct StationFn<R, E>(
    pub  Arc<
        dyn for<'f> Fn(&'f mut Station<E>, &'f Resources) -> StationFnReturn<'f, R, E>
            + Send
            + Sync,
    >,
);

impl<R, E> StationFn<R, E> {
    /// Returns a new `StationFn`.
    ///
    /// # Parameters
    ///
    /// * `f`: Logic to run.
    pub fn new<F>(f: F) -> Self
    where
        F: for<'f> Fn(&'f mut Station<E>, &'f Resources) -> StationFnReturn<'f, R, E>
            + Send
            + Sync
            + 'static,
    {
        Self(Arc::new(f))
    }
}

// We `impl Clone` to avoid the `E: Clone` bound generated by the derive.
#[cfg(not(tarpaulin_include))]
impl<R, E> Clone for StationFn<R, E> {
    fn clone(&self) -> Self {
        Self(Arc::clone(&self.0))
    }
}

impl<R, E> Debug for StationFn<R, E> {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("StationFn(fn(&'_ mut Station<R, E>) -> StationFnReturn<'_, E>)")
    }
}

impl<R, E> PartialEq for StationFn<R, E> {
    fn eq(&self, other: &Self) -> bool {
        std::ptr::eq(&self.0, &other.0)
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn debug_impl_includes_all_fields() {
        let visit_fn = StationFn::new(|_, _| Box::pin(async { Result::<(), ()>::Ok(()) }));

        assert_eq!(
            "StationFn(fn(&'_ mut Station<R, E>) -> StationFnReturn<'_, E>)",
            format!("{:?}", visit_fn)
        );
    }

    #[test]
    fn partial_eq_returns_true_for_same_instance() {
        let visit_fn = StationFn::new(|_, _| Box::pin(async { Result::<(), ()>::Ok(()) }));

        assert_eq!(&visit_fn, &visit_fn);
    }

    #[test]
    fn partial_eq_returns_false_for_different_instance() {
        let visit_fn_0 = StationFn::new(|_, _| Box::pin(async { Result::<(), ()>::Ok(()) }));
        let visit_fn_1 = StationFn::new(|_, _| Box::pin(async { Result::<(), ()>::Ok(()) }));

        assert_ne!(&visit_fn_0, &visit_fn_1);
    }
}
