use std::{
    fmt::{self, Debug},
    future::Future,
    pin::Pin,
    sync::Arc,
};

#[cfg(feature = "mock")]
use crate::VisitStatus;
use crate::{StationMut, TrainReport};

/// Return type of the `StationFn`.
pub type StationFnReturn<'f, R, E> = Pin<Box<dyn Future<Output = Result<R, E>> + 'f>>;

// **Note:** `Debug`, `Clone`, `PartialEq` are manually implemented to avoid the
// trait bound on `E`.
/// Steps to run for this part of the station's logic.
#[allow(clippy::type_complexity)] // trait aliases don't exist yet, so we have to suppress clippy.
pub struct StationFn<R, E>(
    pub Arc<dyn for<'f> Fn(&'f mut StationMut<E>, &'f TrainReport<E>) -> StationFnReturn<'f, R, E>>,
);

impl<R, E> StationFn<R, E> {
    /// Returns a new `StationFn`.
    ///
    /// # Parameters
    ///
    /// * `f`: Logic to run.
    pub fn new<F>(f: F) -> Self
    where
        F: for<'f> Fn(&'f mut StationMut<E>, &'f TrainReport<E>) -> StationFnReturn<'f, R, E>
            + 'static,
    {
        Self(Arc::new(f))
    }

    /// Returns a `StationFn` that always returns `Result::Ok`.
    #[cfg(feature = "mock")]
    pub fn ok(r: R) -> Self
    where
        R: Clone + 'static,
    {
        StationFn::new(move |station, _| {
            let r = r.clone();
            Box::pin(async move {
                station.progress.visit_status = VisitStatus::VisitSuccess;
                Result::<R, E>::Ok(r)
            })
        })
    }

    /// Returns a `StationFn` that always returns `Result::Err`.
    #[cfg(feature = "mock")]
    pub fn err(e: E) -> Self
    where
        E: Clone + 'static,
    {
        StationFn::new(move |station, _| {
            let e = e.clone();
            Box::pin(async move {
                station.progress.visit_status = VisitStatus::VisitFail;
                Result::<R, E>::Err(e)
            })
        })
    }
}

// We `impl Clone` to avoid the `E: Clone` bound generated by the derive.
#[cfg(not(tarpaulin_include))]
impl<R, E> Clone for StationFn<R, E> {
    fn clone(&self) -> Self {
        Self(Arc::clone(&self.0))
    }
}

impl<R, E> Debug for StationFn<R, E> {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("StationFn(fn(&'_ mut Station<R, E>) -> StationFnReturn<'_, E>)")
    }
}

impl<R, E> PartialEq for StationFn<R, E> {
    fn eq(&self, other: &Self) -> bool {
        std::ptr::eq(&self.0, &other.0)
    }
}
